# Pensamiento Bayesiano

Librerías:

```{r}
library(tidyverse)
library(LearnBayes)
```

## Ejemplo 1

-   Pregunta de investigación: ¿Qué proporción de estudiantes universitarios duermen al menos 8 horas diarias?

-   Notación: $p$: proporción de estudiantes que duermen al menos 8 horas diarias.

-   Datos: Muestra de 27 estudiantes donde 11 sí durmieron al menos 8 horas ayer.

-   Modelo: $$L(p)\propto p^s(1-p)^f$$

-   Distribución posterior: Si $g(p)$ es la densidad previa de $p$, entonces: $$g(p|\text{datos})\propto g(p)L(p)$$ **Primera escogencia de previa** $g(p)$

```{r}
p <- seq(0.05,0.95,by = 0.1)
previa <- c(1,5.2,8,7.2,4.6,2.1,0.7,0.1,0,0)
previa <- previa / sum(previa)
plot(p, previa, type = "h", ylab="Probabilidad previa")
```

```{r}
datos_sleep <- c(11, 16)
datos_tot <- data.frame(p = p, previa = previa)
datos_tot <- datos_tot %>% mutate(posterior = previa* p^(11)*(1-p)^(16)) %>%
  mutate(posterior = posterior/sum(posterior)) 
round(datos_tot,2)
```

Comparación:

```{r}
datos_tot_long <- datos_tot %>%
  pivot_longer(previa:posterior,names_to = 'Type',values_to = 'Probability')

ggplot(datos_tot_long, aes(x = p, y = Probability, group = Type, color = Type)) +
  geom_line(linewidth = 3) +
  facet_wrap(~ Type, nrow =  2) +
  theme_minimal()

```

**Segunda escogencia de previa** $g(p)$

Escogencia de los parámetros de la Beta:

```{r}
quantile1 <- list(p = .5,x=.3)
quantile2 <- list(p=.9,x=.5)
beta.select(quantile1,quantile2)
```

Comparación de densidades:

```{r}
a <- 3.26
b <- 7.19
s <- 11
f <- 16

x_values <- seq(0, 1, length.out = 1000)
df <- data.frame(x = x_values,
                 Prior = dbeta(x_values, a, b),
                 Likelihood = dbeta(x_values, s + 1, f + 1),
                 Posterior = dbeta(x_values, a + s, b + f))


ggplot(df, aes(x)) +
  geom_line(aes(y = Prior), linetype = "dashed", size = 1.5, color = "blue") +
  geom_line(aes(y = Likelihood), linetype = "dotted", size = 1.5, color = "green") +
  geom_line(aes(y = Posterior), size = 1.5, color = "red") +
  labs(x = "p", y = "Density") +
  theme_minimal() +
  scale_color_manual(values = c("blue", "green", "red")) +
  theme(legend.position = "top") +
  guides(color = guide_legend(title = "Density"))

```

Para responder parcialmente la pregunta de investigación:

```{r}
1 - pbeta(0.5, a + s, b + f)
```

es decir hay una probabilidad aproximadamente de 7% de que más de la mitad de los estudiantes universitarios duerman más de 8 horas diarias. O bien, si se quiere calcular la probabilidad de que la proporción de estudiantes sea mayor a lo observado:

```{r}
1 - pbeta(11/27, a + s, b + f)
```

Intervalo de credibilidad para $p$:

```{r}
qbeta(c(0.05, 0.95), a + s, b + f)
```

en donde se infiere que $p$ tiene una probabilidad del 95% de estar ubicado entre esos dos valores. El resultado anterior que es exacto, se puede aproximar usando simulación:

```{r}
ps <- rbeta(1000, a + s, b + f)
hist(ps,xlab="p",main="")
```

y la probabilidad de que $p>0.5|\text{datos}$ se puede aproximar empíricamente:

```{r}
sum(ps >= 0.5)/1000
```

y el intervalo de credibilidad correspondiente:

```{r}
quantile(ps, c(0.05, 0.95))
```

### Predicción

Bajo la primera previa:

```{r}
p <- seq(0.05, 0.95, by=.1)
prior <- c(1, 5.2, 8, 7.2, 4.6, 2.1, 0.7, 0.1, 0, 0)
prior <- prior/sum(prior)
m <- 20
ys <- 0:20
pred <- pdiscp(p, prior, m, ys)
round(cbind(0:20,pred),3)
```

Bajo la segunda previa (beta):

```{r}
fy <- choose(m,ys)*beta(a+ys,b = b+m-ys)/beta(a,b)
ab <- c(3.26, 7.19)
pred <- pbetap(ab, m, ys)
```

O por simulación:

```{r}
p <- rbeta(1000, 3.26, 7.19)
y <- rbinom(1000, 20, p)
table(y)
```

```{r}
freq <- table(y)
ys <- as.integer(names(freq))
predprob <- freq / sum(freq)

df <- data.frame(ys = ys, predprob = predprob)


ggplot(df, aes(x = ys, y = predprob)) +
  geom_line(stat = "identity", type = "h", color = "blue", size = 1.5) +
  labs(x = "y", y = "Predictive Probability") +
  theme_minimal()

```

Cálculo de intervalo de credibilidad al 90% usando la probabilidad predictiva anterior:

```{r}
dist <- cbind(ys,predprob)
covprob <- .9
discint(dist,covprob)
```

## Ejemplo 2 (Ejercicio 5, Capítulo 2, Albert)

Previa:

```{r}
previa_mu <- data.frame(mu = seq(20,70,by = 10),
                        gmu = c(.1,.15,.25,.25,.15,.1))
```

Datos:

```{r}
y_snow <- c(38.6,42.4,57.5,40.5,51.7,67.1,33.4,
            60.9,64.1,40.1,40.7,6.4)
y_bar <- mean(y_snow)
```

Verosimilitud:

```{r}
posterior_mu <- previa_mu %>%
  mutate(like = exp(-12/(2*10^2)*(mu-y_bar)^2))
```

Posterior:

```{r}
posterior_mu <- posterior_mu %>% 
  mutate(post = gmu*like/sum(gmu*like))
posterior_mu
```

Intervalo de credibilidad al 80% para $\mu$:

```{r}
dist_mu <- posterior_mu %>% select(mu,post)
covprob <- .8
discint(dist_mu,covprob)
```

También se podría estimar el intervalo de credibilidad vía simulación:

```{r}
muestra_mu <- sample(dist_mu$mu,size = 1000,replace = T,prob = dist_mu$post)
quantile(muestra_mu,probs = c(0.1,0.9))
```

## Ejemplo 3 (Evaluación Práctica 1)

Los siguientes datos simulan el sexo de 200 recién nacidos, en donde 1 denota niño y 0 denota niña.

```{r,echo=FALSE}
set.seed(10)
recien_n <- rbinom(n = 200,size = 1,prob = 111/200)
```

```{r}
recien_n
```

Vamos a utilizar dos distintas formas de definir numéricamente la previa:

### Previa 1

Se va a definir una previa usando una grilla de tamaño 1000 con 100000 muestras:

```{r}
set.seed(10)
p_prev_sample <- runif(n = 100000)
histo_1 <- hist(p_prev_sample,breaks = 1000)


p_post1 <- data.frame(p = histo_1$breaks[-1],prev = histo_1$counts)

p_post1 <- p_post1 %>% mutate(prev = prev / sum(prev))
```

Cálculo de probabilidad posterior y valor de $p$ que la maximiza:

```{r}
y <- sum(recien_n)
n_tot <- length(recien_n)
p_post1 <- p_post1 %>% mutate(post = prev * p^y*(1-p)^(n_tot-y)) %>%
  mutate(post = post / sum(post))
plot(p_post1$p,p_post1$post,type='l')
```

Valor que maximiza la posterior:

```{r}
p_post1$p[which.max(p_post1$post)]
```

### Previa 2

Se va a definir una previa usando una grilla de tamaño 10 con 1000 muestras:

```{r}
set.seed(10)
p_prev_sample <- runif(n = 1000)
histo_2 <- hist(p_prev_sample,breaks = 10)


p_post2 <- data.frame(p = histo_2$breaks[-1],prev = histo_2$counts)

p_post2 <- p_post2 %>% mutate(prev = prev / sum(prev))
```

Cálculo de probabilidad posterior y valor de $p$ que la maximiza:

```{r}
p_post2 <- p_post2 %>% mutate(post = prev * p^y*(1-p)^(n_tot-y)) %>%
  mutate(post = post / sum(post))
plot(p_post2$p,p_post2$post,type='l')
```

Valor que maximiza la posterior:

```{r}
p_post2$p[which.max(p_post2$post)]
```

De ahora en adelante se utilizará la primera previa para calcular la muestra de tamaño 10000 de la distribución posterior:

```{r}
muestra_post <- sample(p_post1$p,replace = T,size = 10000,prob = p_post1$post)
```

Cálculo del intervalo de credibilidad al 90%:

```{r}
quantile(muestra_post,probs = c(0.05,0.95))
```

de donde se deduce que con una probabilidad de 90%, el parámetro $p$ (proporción de niños) esté contenido en el intervalo $(0.55,0.67)$.

Ahora vamos a estimar la probabilidad posterior de que un recién nacido fuera de la muestra sea niño:

```{r}
y_post <- rbinom(n = 1000,prob = muestra_post,size = 1)

prob_prediccion <- sum(y_post)/1000
prob_prediccion
```
